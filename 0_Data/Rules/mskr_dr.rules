# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#------------------------------------------------------------------
# RDFS rule set v0.1.
# This is a direct implementation of the RDFS closure rules.
# $Id: $
#------------------------------------------------------------------

#------------------------------------------------------------------
# RDFS Axioms
#------------------------------------------------------------------

-> (rdf:type      rdfs:range rdfs:Class).
-> (rdfs:Resource  rdf:type  rdfs:Class).
-> (rdfs:Literal   rdf:type  rdfs:Class).
-> (rdf:Statement  rdf:type  rdfs:Class).
-> (rdf:nil        rdf:type  rdf:List).
-> (rdf:subject    rdf:type  rdf:Property).
-> (rdf:object     rdf:type  rdf:Property).
-> (rdf:predicate  rdf:type  rdf:Property).
-> (rdf:first      rdf:type  rdf:Property).
-> (rdf:rest       rdf:type  rdf:Property).

-> (rdfs:subPropertyOf rdfs:domain rdf:Property).
-> (rdfs:subClassOf rdfs:domain rdfs:Class).
-> (rdfs:domain rdfs:domain rdf:Property).
-> (rdfs:range rdfs:domain rdf:Property).
-> (rdf:subject rdfs:domain rdf:Statement).
-> (rdf:predicate rdfs:domain rdf:Statement).
-> (rdf:object rdfs:domain rdf:Statement).
-> (rdf:first rdfs:domain rdf:List).
-> (rdf:rest rdfs:domain rdf:List).

-> (rdfs:subPropertyOf rdfs:range rdf:Property).
-> (rdfs:subClassOf rdfs:range rdfs:Class).
-> (rdfs:domain rdfs:range rdfs:Class).
-> (rdfs:range rdfs:range rdfs:Class).
-> (rdf:type rdfs:range rdfs:Class).
-> (rdfs:comment rdfs:range rdfs:Literal).
-> (rdfs:label rdfs:range rdfs:Literal).
-> (rdf:rest rdfs:range rdf:List).

-> (rdf:Alt rdfs:subClassOf rdfs:Container).
-> (rdf:Bag rdfs:subClassOf rdfs:Container).
-> (rdf:Seq rdfs:subClassOf rdfs:Container).
-> (rdfs:ContainerMembershipProperty rdfs:subClassOf rdf:Property).

-> (rdf:XMLLiteral rdf:type rdfs:Datatype).
-> (rdfs:Datatype rdfs:subClassOf rdfs:Class).

#------------------------------------------------------------------
# RDFS Closure rules
#------------------------------------------------------------------

[rdfs8:  (?a rdfs:subClassOf ?b), (?b rdfs:subClassOf ?c) -> (?a rdfs:subClassOf ?c)]
[rdfs9:  (?x rdfs:subClassOf ?y), (?a rdf:type ?x) -> (?a rdf:type ?y)]

#------------------------------------------------------------------
# Domain range checking rules
#------------------------------------------------------------------

[domain_check:(?s ?p ?o), notEqual(?p,  rdf:type), (?p rdfs:domain ?d), (?s rdf:type ?t), notEqual(?d, ?t) -> ]
[range_check:(?s ?p ?o), (?p rdfs:range ?z), (?o rdf:type ?t), notEqual(?z, ?t) -> ]


#------------------------------------------------------------------
# OWL Rules
#------------------------------------------------------------------

#------------------------------------------------------------------
# The Semantics of Equality
#------------------------------------------------------------------

#[eq_ref:(?s ?p ?o), notEqual(?p,  owl:sameAs) -> (?s owl:sameAs ?s), (?p owl:sameAs ?p), (?o owl:sameAs ?o)]
#[eq_sym:(?s owl:sameAs ?o), notEqual(?s, ?o) -> (?o owl:sameAs ?s)]
#[eq_trans:(?x owl:sameAs ?y), notEqual(?x, ?y), (?y owl:sameAs ?z), notEqual(?y, ?z) -> (?x owl:sameAs ?z)]
#[eq_rep_s:(?x owl:sameAs ?y), notEqual(?x, ?y), (?x ?p ?o) -> (?y ?p ?o)]
#[eq_rep_p:(?x owl:sameAs ?y), notEqual(?x, ?y), (?s ?x ?o) -> (?s ?y ?o)]
#[eq_rep_o:(?x owl:sameAs ?y), notEqual(?x, ?y), (?s ?p ?x) -> (?s ?p ?y)]